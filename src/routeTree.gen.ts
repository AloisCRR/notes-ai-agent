/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AccessImport } from './routes/access'
import { Route as AppImport } from './routes/_app'
import { Route as AppNotesImport } from './routes/_app.notes'

// Create/Update Routes

const AccessRoute = AccessImport.update({
  id: '/access',
  path: '/access',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppNotesRoute = AppNotesImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/access': {
      id: '/access'
      path: '/access'
      fullPath: '/access'
      preLoaderRoute: typeof AccessImport
      parentRoute: typeof rootRoute
    }
    '/_app/notes': {
      id: '/_app/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AppNotesImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppNotesRoute: typeof AppNotesRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppNotesRoute: AppNotesRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AppRouteWithChildren
  '/access': typeof AccessRoute
  '/notes': typeof AppNotesRoute
}

export interface FileRoutesByTo {
  '': typeof AppRouteWithChildren
  '/access': typeof AccessRoute
  '/notes': typeof AppNotesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/access': typeof AccessRoute
  '/_app/notes': typeof AppNotesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/access' | '/notes'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/access' | '/notes'
  id: '__root__' | '/_app' | '/access' | '/_app/notes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AccessRoute: typeof AccessRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AccessRoute: AccessRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/access"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/notes"
      ]
    },
    "/access": {
      "filePath": "access.tsx"
    },
    "/_app/notes": {
      "filePath": "_app.notes.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
