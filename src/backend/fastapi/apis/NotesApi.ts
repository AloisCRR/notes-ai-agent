/* tslint:disable */
/* eslint-disable */
/**
 * Notes AI Agent API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatRequest,
  ChatResponse,
  HTTPValidationError,
  NoteCreate,
  NoteCreateResponse,
} from '../models/index';
import {
    ChatRequestFromJSON,
    ChatRequestToJSON,
    ChatResponseFromJSON,
    ChatResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    NoteCreateFromJSON,
    NoteCreateToJSON,
    NoteCreateResponseFromJSON,
    NoteCreateResponseToJSON,
} from '../models/index';

export interface ChatWithAgentAgentChatPostRequest {
    chatRequest: ChatRequest;
}

export interface CreateNoteNotesPostRequest {
    noteCreate: NoteCreate;
}

/**
 * 
 */
export class NotesApi extends runtime.BaseAPI {

    /**
     * Chat With Agent
     */
    async chatWithAgentAgentChatPostRaw(requestParameters: ChatWithAgentAgentChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatResponse>> {
        if (requestParameters['chatRequest'] == null) {
            throw new runtime.RequiredError(
                'chatRequest',
                'Required parameter "chatRequest" was null or undefined when calling chatWithAgentAgentChatPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/agent/chat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatRequestToJSON(requestParameters['chatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatResponseFromJSON(jsonValue));
    }

    /**
     * Chat With Agent
     */
    async chatWithAgentAgentChatPost(requestParameters: ChatWithAgentAgentChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatResponse> {
        const response = await this.chatWithAgentAgentChatPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Note
     */
    async createNoteNotesPostRaw(requestParameters: CreateNoteNotesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NoteCreateResponse>> {
        if (requestParameters['noteCreate'] == null) {
            throw new runtime.RequiredError(
                'noteCreate',
                'Required parameter "noteCreate" was null or undefined when calling createNoteNotesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NoteCreateToJSON(requestParameters['noteCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Note
     */
    async createNoteNotesPost(requestParameters: CreateNoteNotesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NoteCreateResponse> {
        const response = await this.createNoteNotesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
